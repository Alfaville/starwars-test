plugins {
	id "org.springframework.boot" version "$springVersion"
	id "io.spring.dependency-management" version "$springDependencyManagement"
	id "java"
	id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
	id "pmd"
}

group = "com.kuber"
version = "$version"
sourceCompatibility = JavaVersion.VERSION_11

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-actuator"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation 'org.springframework.boot:spring-boot-starter-amqp'

	implementation "org.springframework.cloud:spring-cloud-starter-sleuth"
	implementation "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
	implementation "org.springframework.cloud:spring-cloud-netflix-hystrix"
	implementation "org.springframework.cloud:spring-cloud-starter-openfeign"

	compileOnly "org.projectlombok:lombok"
	annotationProcessor "org.projectlombok:lombok"
	developmentOnly "org.springframework.boot:spring-boot-devtools"

	implementation "org.flywaydb:flyway-core"
	runtimeOnly "com.h2database:h2"
	runtimeOnly "org.postgresql:postgresql"

	implementation "org.springdoc:springdoc-openapi-ui:$springDocVersion"

	implementation "org.jetbrains.kotlin:kotlin-stdlib"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

	testImplementation ("org.springframework.boot:spring-boot-starter-test") {
		exclude group: "org.junit.vintage", module: "junit-vintage-engine"
	}
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation "org.testcontainers:postgresql:$testContainerPostgresql"
	testImplementation "org.testcontainers:mockserver"
	testImplementation "org.mock-server:mockserver-client-java:$mockerServerClientJava"
	testImplementation "org.testcontainers:rabbitmq:$testcontainersRabbitMQ"
	testImplementation "org.awaitility:awaitility:$awaitilityVersion"
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
	failFast true
}

pmd {
	toolVersion = "$pmdVersion"
	consoleOutput = true
	rulesMinimumPriority = 5
	ruleSetFiles = files("config/custom-pmd-style.xml")
	ignoreFailures = true
}

bootBuildImage {
	imageName = "alfaville/starwar"
}

compileKotlin {
	kotlinOptions {
		jvmTarget = "$jvmTargetVersion"
	}
}
compileTestKotlin {
	kotlinOptions {
		jvmTarget = "$jvmTargetVersion"
	}
}
